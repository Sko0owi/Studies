
zad4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000009e8  00000a7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  0080010c  0080010c  00000a88  2**0
                  ALLOC
  3 .stab         00001608  00000000  00000000  00000a88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fcd  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000305d  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003070  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  000030b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00003c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00003c60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 32       	cpi	r26, 0x20	; 32
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  9e:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_transmit>:

// transmisja jednego znaku
int uart_transmit(char data, FILE *stream)
{
    // czekaj aż transmiter gotowy
    while (!(UCSR0A & _BV(UDRE0)))
  a6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	95 ff       	sbrs	r25, 5
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <uart_transmit>
        ;
    UDR0 = data;
  ae:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    return 0;
}
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 95       	ret

000000b8 <uart_receive>:

// odczyt jednego znaku
int uart_receive(FILE *stream)
{
    // czekaj aż znak dostępny
    while (!(UCSR0A & _BV(RXC0)))
  b8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  bc:	87 ff       	sbrs	r24, 7
  be:	fc cf       	rjmp	.-8      	; 0xb8 <uart_receive>
        ;
    return UDR0;
  c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	08 95       	ret

000000c8 <uart_init>:

// inicjalizacja UART
void uart_init()
{
    // ustaw baudrate
    UBRR0 = UBRR_VALUE;
  c8:	87 e6       	ldi	r24, 0x67	; 103
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  d0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    // wyczyść rejestr UCSR0A
    UCSR0A = 0;
  d4:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    // włącz odbiornik i nadajnik
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    // ustaw format 8n1
    UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  e4:	08 95       	ret

000000e6 <setup_spi>:
}

FILE uart_file;

void setup_spi(){
    SPCR |= _BV(SPIE) | _BV(SPE);
  e6:	8c b5       	in	r24, 0x2c	; 44
  e8:	80 6c       	ori	r24, 0xC0	; 192
  ea:	8c bd       	out	0x2c, r24	; 44

    SPSR |= _BV(SPIF);
  ec:	8d b5       	in	r24, 0x2d	; 45
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	8d bd       	out	0x2d, r24	; 45
  f2:	08 95       	ret

000000f4 <__vector_17>:
}

ISR(SPI_STC_vect){
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
    uint8_t value = SPDR;
 11e:	0e b5       	in	r16, 0x2e	; 46

    printf("Received\n\r");
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	9f 93       	push	r25
 126:	8f 93       	push	r24
 128:	0e 94 50 02 	call	0x4a0	; 0x4a0 <printf>
 12c:	10 e0       	ldi	r17, 0x00	; 0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
    for(int i = 0; i < 8; i++)
 132:	c0 e0       	ldi	r28, 0x00	; 0
 134:	d0 e0       	ldi	r29, 0x00	; 0
 136:	08 c0       	rjmp	.+16     	; 0x148 <__vector_17+0x54>
    {
        if(value & (1 << i)) putchar('1');
 138:	81 e3       	ldi	r24, 0x31	; 49
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 14 02 	call	0x428	; 0x428 <fputc>

ISR(SPI_STC_vect){
    uint8_t value = SPDR;

    printf("Received\n\r");
    for(int i = 0; i < 8; i++)
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	c8 30       	cpi	r28, 0x08	; 8
 144:	d1 05       	cpc	r29, r1
 146:	a9 f0       	breq	.+42     	; 0x172 <__vector_17+0x7e>
    {
        if(value & (1 << i)) putchar('1');
 148:	c8 01       	movw	r24, r16
 14a:	0c 2e       	mov	r0, r28
 14c:	02 c0       	rjmp	.+4      	; 0x152 <__vector_17+0x5e>
 14e:	95 95       	asr	r25
 150:	87 95       	ror	r24
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <__vector_17+0x5a>
 156:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <__iob+0x2>
 15a:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <__iob+0x3>
 15e:	80 fd       	sbrc	r24, 0
 160:	eb cf       	rjmp	.-42     	; 0x138 <__vector_17+0x44>
        else putchar('0');
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 14 02 	call	0x428	; 0x428 <fputc>

ISR(SPI_STC_vect){
    uint8_t value = SPDR;

    printf("Received\n\r");
    for(int i = 0; i < 8; i++)
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	c8 30       	cpi	r28, 0x08	; 8
 16e:	d1 05       	cpc	r29, r1
 170:	59 f7       	brne	.-42     	; 0x148 <__vector_17+0x54>
    {
        if(value & (1 << i)) putchar('1');
        else putchar('0');
    }
    printf("\n\r");
 172:	88 e0       	ldi	r24, 0x08	; 8
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	9f 93       	push	r25
 178:	8f 93       	push	r24
 17a:	0e 94 50 02 	call	0x4a0	; 0x4a0 <printf>
    // printf("Received: "BYTE_TO_BINARY_PATTERN"\r\n", BYTE_TO_BINARY(value));
}
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	bf 91       	pop	r27
 18c:	af 91       	pop	r26
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	7f 91       	pop	r23
 194:	6f 91       	pop	r22
 196:	5f 91       	pop	r21
 198:	4f 91       	pop	r20
 19a:	3f 91       	pop	r19
 19c:	2f 91       	pop	r18
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <send_byte>:


void send_byte(uint8_t byte){

    PORTD &= ~_BV(SS);
 1ac:	5c 98       	cbi	0x0b, 4	; 11

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 1ae:	80 fd       	sbrc	r24, 0
 1b0:	2e c0       	rjmp	.+92     	; 0x20e <send_byte+0x62>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 1b2:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 1b4:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 1b6:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 1b8:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 1ba:	80 fd       	sbrc	r24, 0
 1bc:	2e c0       	rjmp	.+92     	; 0x21a <send_byte+0x6e>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 1be:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 1c0:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 1c2:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 1c4:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 1c6:	80 fd       	sbrc	r24, 0
 1c8:	2e c0       	rjmp	.+92     	; 0x226 <send_byte+0x7a>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 1ca:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 1cc:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 1ce:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 1d0:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 1d2:	80 fd       	sbrc	r24, 0
 1d4:	2e c0       	rjmp	.+92     	; 0x232 <send_byte+0x86>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 1d6:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 1d8:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 1da:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 1dc:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 1de:	80 fd       	sbrc	r24, 0
 1e0:	2e c0       	rjmp	.+92     	; 0x23e <send_byte+0x92>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 1e2:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 1e4:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 1e6:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 1e8:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 1ea:	80 fd       	sbrc	r24, 0
 1ec:	2e c0       	rjmp	.+92     	; 0x24a <send_byte+0x9e>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 1ee:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 1f0:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 1f2:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 1f4:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 1f6:	80 fd       	sbrc	r24, 0
 1f8:	2e c0       	rjmp	.+92     	; 0x256 <send_byte+0xaa>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 1fa:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 1fc:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 1fe:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 200:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 202:	71 f1       	breq	.+92     	; 0x260 <send_byte+0xb4>
            PORTD |= _BV(MOSI); 
 204:	5d 9a       	sbi	0x0b, 5	; 11
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;

        // sck rising edge
        PORTD |= _BV(SCK);
 206:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 208:	5f 98       	cbi	0x0b, 7	; 11
    }

    PORTD |= _BV(SS);
 20a:	5c 9a       	sbi	0x0b, 4	; 11
 20c:	08 95       	ret

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
            PORTD |= _BV(MOSI); 
 20e:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 210:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 212:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 214:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 216:	80 ff       	sbrs	r24, 0
 218:	d2 cf       	rjmp	.-92     	; 0x1be <send_byte+0x12>
            PORTD |= _BV(MOSI); 
 21a:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 21c:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 21e:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 220:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 222:	80 ff       	sbrs	r24, 0
 224:	d2 cf       	rjmp	.-92     	; 0x1ca <send_byte+0x1e>
            PORTD |= _BV(MOSI); 
 226:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 228:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 22a:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 22c:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 22e:	80 ff       	sbrs	r24, 0
 230:	d2 cf       	rjmp	.-92     	; 0x1d6 <send_byte+0x2a>
            PORTD |= _BV(MOSI); 
 232:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 234:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 236:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 238:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 23a:	80 ff       	sbrs	r24, 0
 23c:	d2 cf       	rjmp	.-92     	; 0x1e2 <send_byte+0x36>
            PORTD |= _BV(MOSI); 
 23e:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 240:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 242:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 244:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 246:	80 ff       	sbrs	r24, 0
 248:	d2 cf       	rjmp	.-92     	; 0x1ee <send_byte+0x42>
            PORTD |= _BV(MOSI); 
 24a:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 24c:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 24e:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 250:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 252:	80 ff       	sbrs	r24, 0
 254:	d2 cf       	rjmp	.-92     	; 0x1fa <send_byte+0x4e>
            PORTD |= _BV(MOSI); 
 256:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 258:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 25a:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 25c:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 25e:	91 f6       	brne	.-92     	; 0x204 <send_byte+0x58>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 260:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;

        // sck rising edge
        PORTD |= _BV(SCK);
 262:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 264:	5f 98       	cbi	0x0b, 7	; 11
    }

    PORTD |= _BV(SS);
 266:	5c 9a       	sbi	0x0b, 4	; 11
 268:	08 95       	ret

0000026a <i2cInit>:
#include "i2c.h"
void i2cInit() {
  // ustaw bitrate
  // 8MHz / (16+2*TWBR*1) ~= 100kHz
  TWBR = 32;
 26a:	80 e2       	ldi	r24, 0x20	; 32
 26c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  // uruchom TWI
  TWCR |= _BV(TWEN);
 270:	ec eb       	ldi	r30, 0xBC	; 188
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	84 60       	ori	r24, 0x04	; 4
 278:	80 83       	st	Z, r24
 27a:	08 95       	ret

0000027c <i2cWaitForComplete>:
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 27c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 280:	87 ff       	sbrs	r24, 7
 282:	fc cf       	rjmp	.-8      	; 0x27c <i2cWaitForComplete>
}
 284:	08 95       	ret

00000286 <i2cStart>:
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
 286:	84 ea       	ldi	r24, 0xA4	; 164
 288:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 28c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 290:	87 ff       	sbrs	r24, 7
 292:	fc cf       	rjmp	.-8      	; 0x28c <i2cStart+0x6>
}
void i2cStart() {
  // wyślij warunek startu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
  i2cWaitForComplete();
}
 294:	08 95       	ret

00000296 <i2cStop>:
void i2cStop() {
  // wyślij warunek stopu
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
 296:	84 e9       	ldi	r24, 0x94	; 148
 298:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 29c:	08 95       	ret

0000029e <i2cReset>:
}
void i2cReset() {
  // wyślij warunek stopu i wyłącz TWI
  TWCR = _BV(TWINT) | _BV(TWSTO);
 29e:	80 e9       	ldi	r24, 0x90	; 144
 2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a4:	08 95       	ret

000002a6 <i2cReadAck>:
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
 2a6:	84 ec       	ldi	r24, 0xC4	; 196
 2a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 2ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b0:	87 ff       	sbrs	r24, 7
 2b2:	fc cf       	rjmp	.-8      	; 0x2ac <i2cReadAck+0x6>
}
uint8_t i2cReadAck() {
  // odczytaj dane, wyślij ACK
  TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);
  i2cWaitForComplete();
  return TWDR;
 2b4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 2b8:	08 95       	ret

000002ba <i2cReadNoAck>:
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
 2ba:	84 e8       	ldi	r24, 0x84	; 132
 2bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  // uruchom TWI
  TWCR |= _BV(TWEN);
}
void i2cWaitForComplete() {
  // czekaj na flagę TWINT
  while(!(TWCR & _BV(TWINT)));
 2c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c4:	87 ff       	sbrs	r24, 7
 2c6:	fc cf       	rjmp	.-8      	; 0x2c0 <i2cReadNoAck+0x6>
}
uint8_t i2cReadNoAck() {
  // odczytaj dane, wyślij NOACK
  TWCR = _BV(TWINT) | _BV(TWEN);
  i2cWaitForComplete();
  return TWDR;
 2c8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 2cc:	08 95       	ret

000002ce <i2cSend>:
 2ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2d2:	84 e8       	ldi	r24, 0x84	; 132
 2d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2dc:	87 ff       	sbrs	r24, 7
 2de:	fc cf       	rjmp	.-8      	; 0x2d8 <i2cSend+0xa>
 2e0:	08 95       	ret

000002e2 <main>:

// inicjalizacja UART
void uart_init()
{
    // ustaw baudrate
    UBRR0 = UBRR_VALUE;
 2e2:	87 e6       	ldi	r24, 0x67	; 103
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2ea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    // wyczyść rejestr UCSR0A
    UCSR0A = 0;
 2ee:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    // włącz odbiornik i nadajnik
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 2f2:	88 e1       	ldi	r24, 0x18	; 24
 2f4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    // ustaw format 8n1
    UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
 2f8:	86 e0       	ldi	r24, 0x06	; 6
 2fa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
}

int main()
{
    uart_init();
    fdev_setup_stream(&uart_file,uart_transmit,uart_receive,_FDEV_SETUP_RW);
 2fe:	8c e0       	ldi	r24, 0x0C	; 12
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	23 e5       	ldi	r18, 0x53	; 83
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <__data_end+0x9>
 30a:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <__data_end+0x8>
 30e:	2c e5       	ldi	r18, 0x5C	; 92
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	30 93 17 01 	sts	0x0117, r19	; 0x800117 <__data_end+0xb>
 316:	20 93 16 01 	sts	0x0116, r18	; 0x800116 <__data_end+0xa>
 31a:	23 e0       	ldi	r18, 0x03	; 3
 31c:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <__data_end+0x3>
 320:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0xd>
 324:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end+0xc>
    stdin = stdout = stderr = &uart_file;
 328:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <__iob+0x5>
 32c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__iob+0x4>
 330:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__iob+0x3>
 334:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__iob+0x2>
 338:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__iob+0x1>
 33c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__iob>

    DDRD |= _BV(SCK) | _BV(MOSI) | _BV(SS);
 340:	8a b1       	in	r24, 0x0a	; 10
 342:	80 6b       	ori	r24, 0xB0	; 176
 344:	8a b9       	out	0x0a, r24	; 10
    PORTD |= _BV(SS);
 346:	5c 9a       	sbi	0x0b, 4	; 11

    sei();
 348:	78 94       	sei
}

FILE uart_file;

void setup_spi(){
    SPCR |= _BV(SPIE) | _BV(SPE);
 34a:	8c b5       	in	r24, 0x2c	; 44
 34c:	80 6c       	ori	r24, 0xC0	; 192
 34e:	8c bd       	out	0x2c, r24	; 44

    SPSR |= _BV(SPIF);
 350:	8d b5       	in	r24, 0x2d	; 45
 352:	80 68       	ori	r24, 0x80	; 128
 354:	8d bd       	out	0x2d, r24	; 45
    PORTD |= _BV(SS);

    sei();
    setup_spi();

    uint8_t counter = 0;
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	37 c0       	rjmp	.+110    	; 0x3c8 <main+0xe6>
    for(int i = 0; i<8; i++){

        if(byte & 1)
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 35a:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 35c:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 35e:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 360:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 362:	80 fd       	sbrc	r24, 0
 364:	3c c0       	rjmp	.+120    	; 0x3de <main+0xfc>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 366:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 368:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 36a:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 36c:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 36e:	80 fd       	sbrc	r24, 0
 370:	3c c0       	rjmp	.+120    	; 0x3ea <main+0x108>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 372:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 374:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 376:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 378:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 37a:	80 fd       	sbrc	r24, 0
 37c:	3c c0       	rjmp	.+120    	; 0x3f6 <main+0x114>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 37e:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 380:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 382:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 384:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 386:	80 fd       	sbrc	r24, 0
 388:	3c c0       	rjmp	.+120    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 38a:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 38c:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 38e:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 390:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 392:	80 fd       	sbrc	r24, 0
 394:	3c c0       	rjmp	.+120    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 396:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;
 398:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 39a:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 39c:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 39e:	80 fd       	sbrc	r24, 0
 3a0:	3c c0       	rjmp	.+120    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 3a2:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;

        // sck rising edge
        PORTD |= _BV(SCK);
 3a4:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 3a6:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 3a8:	86 95       	lsr	r24
 3aa:	e1 f5       	brne	.+120    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
            PORTD |= _BV(MOSI); 
        else
            PORTD &= ~_BV(MOSI); 
 3ac:	5d 98       	cbi	0x0b, 5	; 11

        byte >>= 1;

        // sck rising edge
        PORTD |= _BV(SCK);
 3ae:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 3b0:	5f 98       	cbi	0x0b, 7	; 11
    }

    PORTD |= _BV(SS);
 3b2:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	33 ed       	ldi	r19, 0xD3	; 211
 3b8:	80 e3       	ldi	r24, 0x30	; 48
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	30 40       	sbci	r19, 0x00	; 0
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <main+0xd8>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <main+0xe2>
 3c4:	00 00       	nop
    setup_spi();

    uint8_t counter = 0;

    while(1){
        send_byte(counter++);
 3c6:	89 2f       	mov	r24, r25
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	98 0f       	add	r25, r24
}


void send_byte(uint8_t byte){

    PORTD &= ~_BV(SS);
 3cc:	5c 98       	cbi	0x0b, 4	; 11

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 3ce:	80 ff       	sbrs	r24, 0
 3d0:	c4 cf       	rjmp	.-120    	; 0x35a <main+0x78>
            PORTD |= _BV(MOSI); 
 3d2:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 3d4:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 3d6:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 3d8:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 3da:	80 ff       	sbrs	r24, 0
 3dc:	c4 cf       	rjmp	.-120    	; 0x366 <main+0x84>
            PORTD |= _BV(MOSI); 
 3de:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 3e0:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 3e2:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 3e4:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 3e6:	80 ff       	sbrs	r24, 0
 3e8:	c4 cf       	rjmp	.-120    	; 0x372 <main+0x90>
            PORTD |= _BV(MOSI); 
 3ea:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 3ec:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 3ee:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 3f0:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 3f2:	80 ff       	sbrs	r24, 0
 3f4:	c4 cf       	rjmp	.-120    	; 0x37e <main+0x9c>
            PORTD |= _BV(MOSI); 
 3f6:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 3f8:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 3fa:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 3fc:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 3fe:	80 ff       	sbrs	r24, 0
 400:	c4 cf       	rjmp	.-120    	; 0x38a <main+0xa8>
            PORTD |= _BV(MOSI); 
 402:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 404:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 406:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 408:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 40a:	80 ff       	sbrs	r24, 0
 40c:	c4 cf       	rjmp	.-120    	; 0x396 <main+0xb4>
            PORTD |= _BV(MOSI); 
 40e:	5d 9a       	sbi	0x0b, 5	; 11
        else
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;
 410:	86 95       	lsr	r24

        // sck rising edge
        PORTD |= _BV(SCK);
 412:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 414:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 416:	80 ff       	sbrs	r24, 0
 418:	c4 cf       	rjmp	.-120    	; 0x3a2 <main+0xc0>
            PORTD |= _BV(MOSI); 
 41a:	5d 9a       	sbi	0x0b, 5	; 11
            PORTD &= ~_BV(MOSI); 

        byte >>= 1;

        // sck rising edge
        PORTD |= _BV(SCK);
 41c:	5f 9a       	sbi	0x0b, 7	; 11

        PORTD &= ~_BV(SCK);
 41e:	5f 98       	cbi	0x0b, 7	; 11
    PORTD &= ~_BV(SS);

    // go over each bit and show it by high or low mosi value
    for(int i = 0; i<8; i++){

        if(byte & 1)
 420:	86 95       	lsr	r24
 422:	21 f2       	breq	.-120    	; 0x3ac <main+0xca>
            PORTD |= _BV(MOSI); 
 424:	5d 9a       	sbi	0x0b, 5	; 11
 426:	c3 cf       	rjmp	.-122    	; 0x3ae <main+0xcc>

00000428 <fputc>:
 428:	0f 93       	push	r16
 42a:	1f 93       	push	r17
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	fb 01       	movw	r30, r22
 432:	23 81       	ldd	r18, Z+3	; 0x03
 434:	21 fd       	sbrc	r18, 1
 436:	03 c0       	rjmp	.+6      	; 0x43e <fputc+0x16>
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	2c c0       	rjmp	.+88     	; 0x496 <fputc+0x6e>
 43e:	22 ff       	sbrs	r18, 2
 440:	16 c0       	rjmp	.+44     	; 0x46e <fputc+0x46>
 442:	46 81       	ldd	r20, Z+6	; 0x06
 444:	57 81       	ldd	r21, Z+7	; 0x07
 446:	24 81       	ldd	r18, Z+4	; 0x04
 448:	35 81       	ldd	r19, Z+5	; 0x05
 44a:	42 17       	cp	r20, r18
 44c:	53 07       	cpc	r21, r19
 44e:	44 f4       	brge	.+16     	; 0x460 <fputc+0x38>
 450:	a0 81       	ld	r26, Z
 452:	b1 81       	ldd	r27, Z+1	; 0x01
 454:	9d 01       	movw	r18, r26
 456:	2f 5f       	subi	r18, 0xFF	; 255
 458:	3f 4f       	sbci	r19, 0xFF	; 255
 45a:	31 83       	std	Z+1, r19	; 0x01
 45c:	20 83       	st	Z, r18
 45e:	8c 93       	st	X, r24
 460:	26 81       	ldd	r18, Z+6	; 0x06
 462:	37 81       	ldd	r19, Z+7	; 0x07
 464:	2f 5f       	subi	r18, 0xFF	; 255
 466:	3f 4f       	sbci	r19, 0xFF	; 255
 468:	37 83       	std	Z+7, r19	; 0x07
 46a:	26 83       	std	Z+6, r18	; 0x06
 46c:	14 c0       	rjmp	.+40     	; 0x496 <fputc+0x6e>
 46e:	8b 01       	movw	r16, r22
 470:	ec 01       	movw	r28, r24
 472:	fb 01       	movw	r30, r22
 474:	00 84       	ldd	r0, Z+8	; 0x08
 476:	f1 85       	ldd	r31, Z+9	; 0x09
 478:	e0 2d       	mov	r30, r0
 47a:	09 95       	icall
 47c:	89 2b       	or	r24, r25
 47e:	e1 f6       	brne	.-72     	; 0x438 <fputc+0x10>
 480:	d8 01       	movw	r26, r16
 482:	16 96       	adiw	r26, 0x06	; 6
 484:	8d 91       	ld	r24, X+
 486:	9c 91       	ld	r25, X
 488:	17 97       	sbiw	r26, 0x07	; 7
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	17 96       	adiw	r26, 0x07	; 7
 48e:	9c 93       	st	X, r25
 490:	8e 93       	st	-X, r24
 492:	16 97       	sbiw	r26, 0x06	; 6
 494:	ce 01       	movw	r24, r28
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	08 95       	ret

000004a0 <printf>:
 4a0:	a0 e0       	ldi	r26, 0x00	; 0
 4a2:	b0 e0       	ldi	r27, 0x00	; 0
 4a4:	e6 e5       	ldi	r30, 0x56	; 86
 4a6:	f2 e0       	ldi	r31, 0x02	; 2
 4a8:	0c 94 cb 04 	jmp	0x996	; 0x996 <__prologue_saves__+0x20>
 4ac:	ae 01       	movw	r20, r28
 4ae:	4b 5f       	subi	r20, 0xFB	; 251
 4b0:	5f 4f       	sbci	r21, 0xFF	; 255
 4b2:	fa 01       	movw	r30, r20
 4b4:	61 91       	ld	r22, Z+
 4b6:	71 91       	ld	r23, Z+
 4b8:	af 01       	movw	r20, r30
 4ba:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__iob+0x2>
 4be:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__iob+0x3>
 4c2:	0e 94 66 02 	call	0x4cc	; 0x4cc <vfprintf>
 4c6:	e2 e0       	ldi	r30, 0x02	; 2
 4c8:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__epilogue_restores__+0x20>

000004cc <vfprintf>:
 4cc:	ab e0       	ldi	r26, 0x0B	; 11
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	ec e6       	ldi	r30, 0x6C	; 108
 4d2:	f2 e0       	ldi	r31, 0x02	; 2
 4d4:	0c 94 bb 04 	jmp	0x976	; 0x976 <__prologue_saves__>
 4d8:	6c 01       	movw	r12, r24
 4da:	7b 01       	movw	r14, r22
 4dc:	8a 01       	movw	r16, r20
 4de:	fc 01       	movw	r30, r24
 4e0:	17 82       	std	Z+7, r1	; 0x07
 4e2:	16 82       	std	Z+6, r1	; 0x06
 4e4:	83 81       	ldd	r24, Z+3	; 0x03
 4e6:	81 ff       	sbrs	r24, 1
 4e8:	cc c1       	rjmp	.+920    	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 4ea:	ce 01       	movw	r24, r28
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	3c 01       	movw	r6, r24
 4f0:	f6 01       	movw	r30, r12
 4f2:	93 81       	ldd	r25, Z+3	; 0x03
 4f4:	f7 01       	movw	r30, r14
 4f6:	93 fd       	sbrc	r25, 3
 4f8:	85 91       	lpm	r24, Z+
 4fa:	93 ff       	sbrs	r25, 3
 4fc:	81 91       	ld	r24, Z+
 4fe:	7f 01       	movw	r14, r30
 500:	88 23       	and	r24, r24
 502:	09 f4       	brne	.+2      	; 0x506 <vfprintf+0x3a>
 504:	ba c1       	rjmp	.+884    	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 506:	85 32       	cpi	r24, 0x25	; 37
 508:	39 f4       	brne	.+14     	; 0x518 <vfprintf+0x4c>
 50a:	93 fd       	sbrc	r25, 3
 50c:	85 91       	lpm	r24, Z+
 50e:	93 ff       	sbrs	r25, 3
 510:	81 91       	ld	r24, Z+
 512:	7f 01       	movw	r14, r30
 514:	85 32       	cpi	r24, 0x25	; 37
 516:	29 f4       	brne	.+10     	; 0x522 <vfprintf+0x56>
 518:	b6 01       	movw	r22, r12
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 14 02 	call	0x428	; 0x428 <fputc>
 520:	e7 cf       	rjmp	.-50     	; 0x4f0 <vfprintf+0x24>
 522:	91 2c       	mov	r9, r1
 524:	21 2c       	mov	r2, r1
 526:	31 2c       	mov	r3, r1
 528:	ff e1       	ldi	r31, 0x1F	; 31
 52a:	f3 15       	cp	r31, r3
 52c:	d8 f0       	brcs	.+54     	; 0x564 <vfprintf+0x98>
 52e:	8b 32       	cpi	r24, 0x2B	; 43
 530:	79 f0       	breq	.+30     	; 0x550 <vfprintf+0x84>
 532:	38 f4       	brcc	.+14     	; 0x542 <vfprintf+0x76>
 534:	80 32       	cpi	r24, 0x20	; 32
 536:	79 f0       	breq	.+30     	; 0x556 <vfprintf+0x8a>
 538:	83 32       	cpi	r24, 0x23	; 35
 53a:	a1 f4       	brne	.+40     	; 0x564 <vfprintf+0x98>
 53c:	23 2d       	mov	r18, r3
 53e:	20 61       	ori	r18, 0x10	; 16
 540:	1d c0       	rjmp	.+58     	; 0x57c <vfprintf+0xb0>
 542:	8d 32       	cpi	r24, 0x2D	; 45
 544:	61 f0       	breq	.+24     	; 0x55e <vfprintf+0x92>
 546:	80 33       	cpi	r24, 0x30	; 48
 548:	69 f4       	brne	.+26     	; 0x564 <vfprintf+0x98>
 54a:	23 2d       	mov	r18, r3
 54c:	21 60       	ori	r18, 0x01	; 1
 54e:	16 c0       	rjmp	.+44     	; 0x57c <vfprintf+0xb0>
 550:	83 2d       	mov	r24, r3
 552:	82 60       	ori	r24, 0x02	; 2
 554:	38 2e       	mov	r3, r24
 556:	e3 2d       	mov	r30, r3
 558:	e4 60       	ori	r30, 0x04	; 4
 55a:	3e 2e       	mov	r3, r30
 55c:	2a c0       	rjmp	.+84     	; 0x5b2 <vfprintf+0xe6>
 55e:	f3 2d       	mov	r31, r3
 560:	f8 60       	ori	r31, 0x08	; 8
 562:	1d c0       	rjmp	.+58     	; 0x59e <vfprintf+0xd2>
 564:	37 fc       	sbrc	r3, 7
 566:	2d c0       	rjmp	.+90     	; 0x5c2 <vfprintf+0xf6>
 568:	20 ed       	ldi	r18, 0xD0	; 208
 56a:	28 0f       	add	r18, r24
 56c:	2a 30       	cpi	r18, 0x0A	; 10
 56e:	40 f0       	brcs	.+16     	; 0x580 <vfprintf+0xb4>
 570:	8e 32       	cpi	r24, 0x2E	; 46
 572:	b9 f4       	brne	.+46     	; 0x5a2 <vfprintf+0xd6>
 574:	36 fc       	sbrc	r3, 6
 576:	81 c1       	rjmp	.+770    	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 578:	23 2d       	mov	r18, r3
 57a:	20 64       	ori	r18, 0x40	; 64
 57c:	32 2e       	mov	r3, r18
 57e:	19 c0       	rjmp	.+50     	; 0x5b2 <vfprintf+0xe6>
 580:	36 fe       	sbrs	r3, 6
 582:	06 c0       	rjmp	.+12     	; 0x590 <vfprintf+0xc4>
 584:	8a e0       	ldi	r24, 0x0A	; 10
 586:	98 9e       	mul	r9, r24
 588:	20 0d       	add	r18, r0
 58a:	11 24       	eor	r1, r1
 58c:	92 2e       	mov	r9, r18
 58e:	11 c0       	rjmp	.+34     	; 0x5b2 <vfprintf+0xe6>
 590:	ea e0       	ldi	r30, 0x0A	; 10
 592:	2e 9e       	mul	r2, r30
 594:	20 0d       	add	r18, r0
 596:	11 24       	eor	r1, r1
 598:	22 2e       	mov	r2, r18
 59a:	f3 2d       	mov	r31, r3
 59c:	f0 62       	ori	r31, 0x20	; 32
 59e:	3f 2e       	mov	r3, r31
 5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <vfprintf+0xe6>
 5a2:	8c 36       	cpi	r24, 0x6C	; 108
 5a4:	21 f4       	brne	.+8      	; 0x5ae <vfprintf+0xe2>
 5a6:	83 2d       	mov	r24, r3
 5a8:	80 68       	ori	r24, 0x80	; 128
 5aa:	38 2e       	mov	r3, r24
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <vfprintf+0xe6>
 5ae:	88 36       	cpi	r24, 0x68	; 104
 5b0:	41 f4       	brne	.+16     	; 0x5c2 <vfprintf+0xf6>
 5b2:	f7 01       	movw	r30, r14
 5b4:	93 fd       	sbrc	r25, 3
 5b6:	85 91       	lpm	r24, Z+
 5b8:	93 ff       	sbrs	r25, 3
 5ba:	81 91       	ld	r24, Z+
 5bc:	7f 01       	movw	r14, r30
 5be:	81 11       	cpse	r24, r1
 5c0:	b3 cf       	rjmp	.-154    	; 0x528 <vfprintf+0x5c>
 5c2:	98 2f       	mov	r25, r24
 5c4:	9f 7d       	andi	r25, 0xDF	; 223
 5c6:	95 54       	subi	r25, 0x45	; 69
 5c8:	93 30       	cpi	r25, 0x03	; 3
 5ca:	28 f4       	brcc	.+10     	; 0x5d6 <vfprintf+0x10a>
 5cc:	0c 5f       	subi	r16, 0xFC	; 252
 5ce:	1f 4f       	sbci	r17, 0xFF	; 255
 5d0:	9f e3       	ldi	r25, 0x3F	; 63
 5d2:	99 83       	std	Y+1, r25	; 0x01
 5d4:	0d c0       	rjmp	.+26     	; 0x5f0 <vfprintf+0x124>
 5d6:	83 36       	cpi	r24, 0x63	; 99
 5d8:	31 f0       	breq	.+12     	; 0x5e6 <vfprintf+0x11a>
 5da:	83 37       	cpi	r24, 0x73	; 115
 5dc:	71 f0       	breq	.+28     	; 0x5fa <vfprintf+0x12e>
 5de:	83 35       	cpi	r24, 0x53	; 83
 5e0:	09 f0       	breq	.+2      	; 0x5e4 <vfprintf+0x118>
 5e2:	59 c0       	rjmp	.+178    	; 0x696 <vfprintf+0x1ca>
 5e4:	21 c0       	rjmp	.+66     	; 0x628 <vfprintf+0x15c>
 5e6:	f8 01       	movw	r30, r16
 5e8:	80 81       	ld	r24, Z
 5ea:	89 83       	std	Y+1, r24	; 0x01
 5ec:	0e 5f       	subi	r16, 0xFE	; 254
 5ee:	1f 4f       	sbci	r17, 0xFF	; 255
 5f0:	88 24       	eor	r8, r8
 5f2:	83 94       	inc	r8
 5f4:	91 2c       	mov	r9, r1
 5f6:	53 01       	movw	r10, r6
 5f8:	13 c0       	rjmp	.+38     	; 0x620 <vfprintf+0x154>
 5fa:	28 01       	movw	r4, r16
 5fc:	f2 e0       	ldi	r31, 0x02	; 2
 5fe:	4f 0e       	add	r4, r31
 600:	51 1c       	adc	r5, r1
 602:	f8 01       	movw	r30, r16
 604:	a0 80       	ld	r10, Z
 606:	b1 80       	ldd	r11, Z+1	; 0x01
 608:	36 fe       	sbrs	r3, 6
 60a:	03 c0       	rjmp	.+6      	; 0x612 <vfprintf+0x146>
 60c:	69 2d       	mov	r22, r9
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <vfprintf+0x14a>
 612:	6f ef       	ldi	r22, 0xFF	; 255
 614:	7f ef       	ldi	r23, 0xFF	; 255
 616:	c5 01       	movw	r24, r10
 618:	0e 94 52 04 	call	0x8a4	; 0x8a4 <strnlen>
 61c:	4c 01       	movw	r8, r24
 61e:	82 01       	movw	r16, r4
 620:	f3 2d       	mov	r31, r3
 622:	ff 77       	andi	r31, 0x7F	; 127
 624:	3f 2e       	mov	r3, r31
 626:	16 c0       	rjmp	.+44     	; 0x654 <vfprintf+0x188>
 628:	28 01       	movw	r4, r16
 62a:	22 e0       	ldi	r18, 0x02	; 2
 62c:	42 0e       	add	r4, r18
 62e:	51 1c       	adc	r5, r1
 630:	f8 01       	movw	r30, r16
 632:	a0 80       	ld	r10, Z
 634:	b1 80       	ldd	r11, Z+1	; 0x01
 636:	36 fe       	sbrs	r3, 6
 638:	03 c0       	rjmp	.+6      	; 0x640 <vfprintf+0x174>
 63a:	69 2d       	mov	r22, r9
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <vfprintf+0x178>
 640:	6f ef       	ldi	r22, 0xFF	; 255
 642:	7f ef       	ldi	r23, 0xFF	; 255
 644:	c5 01       	movw	r24, r10
 646:	0e 94 47 04 	call	0x88e	; 0x88e <strnlen_P>
 64a:	4c 01       	movw	r8, r24
 64c:	f3 2d       	mov	r31, r3
 64e:	f0 68       	ori	r31, 0x80	; 128
 650:	3f 2e       	mov	r3, r31
 652:	82 01       	movw	r16, r4
 654:	33 fc       	sbrc	r3, 3
 656:	1b c0       	rjmp	.+54     	; 0x68e <vfprintf+0x1c2>
 658:	82 2d       	mov	r24, r2
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	88 16       	cp	r8, r24
 65e:	99 06       	cpc	r9, r25
 660:	b0 f4       	brcc	.+44     	; 0x68e <vfprintf+0x1c2>
 662:	b6 01       	movw	r22, r12
 664:	80 e2       	ldi	r24, 0x20	; 32
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 14 02 	call	0x428	; 0x428 <fputc>
 66c:	2a 94       	dec	r2
 66e:	f4 cf       	rjmp	.-24     	; 0x658 <vfprintf+0x18c>
 670:	f5 01       	movw	r30, r10
 672:	37 fc       	sbrc	r3, 7
 674:	85 91       	lpm	r24, Z+
 676:	37 fe       	sbrs	r3, 7
 678:	81 91       	ld	r24, Z+
 67a:	5f 01       	movw	r10, r30
 67c:	b6 01       	movw	r22, r12
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 14 02 	call	0x428	; 0x428 <fputc>
 684:	21 10       	cpse	r2, r1
 686:	2a 94       	dec	r2
 688:	21 e0       	ldi	r18, 0x01	; 1
 68a:	82 1a       	sub	r8, r18
 68c:	91 08       	sbc	r9, r1
 68e:	81 14       	cp	r8, r1
 690:	91 04       	cpc	r9, r1
 692:	71 f7       	brne	.-36     	; 0x670 <vfprintf+0x1a4>
 694:	e8 c0       	rjmp	.+464    	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 696:	84 36       	cpi	r24, 0x64	; 100
 698:	11 f0       	breq	.+4      	; 0x69e <vfprintf+0x1d2>
 69a:	89 36       	cpi	r24, 0x69	; 105
 69c:	41 f5       	brne	.+80     	; 0x6ee <vfprintf+0x222>
 69e:	f8 01       	movw	r30, r16
 6a0:	37 fe       	sbrs	r3, 7
 6a2:	07 c0       	rjmp	.+14     	; 0x6b2 <vfprintf+0x1e6>
 6a4:	60 81       	ld	r22, Z
 6a6:	71 81       	ldd	r23, Z+1	; 0x01
 6a8:	82 81       	ldd	r24, Z+2	; 0x02
 6aa:	93 81       	ldd	r25, Z+3	; 0x03
 6ac:	0c 5f       	subi	r16, 0xFC	; 252
 6ae:	1f 4f       	sbci	r17, 0xFF	; 255
 6b0:	08 c0       	rjmp	.+16     	; 0x6c2 <vfprintf+0x1f6>
 6b2:	60 81       	ld	r22, Z
 6b4:	71 81       	ldd	r23, Z+1	; 0x01
 6b6:	07 2e       	mov	r0, r23
 6b8:	00 0c       	add	r0, r0
 6ba:	88 0b       	sbc	r24, r24
 6bc:	99 0b       	sbc	r25, r25
 6be:	0e 5f       	subi	r16, 0xFE	; 254
 6c0:	1f 4f       	sbci	r17, 0xFF	; 255
 6c2:	f3 2d       	mov	r31, r3
 6c4:	ff 76       	andi	r31, 0x6F	; 111
 6c6:	3f 2e       	mov	r3, r31
 6c8:	97 ff       	sbrs	r25, 7
 6ca:	09 c0       	rjmp	.+18     	; 0x6de <vfprintf+0x212>
 6cc:	90 95       	com	r25
 6ce:	80 95       	com	r24
 6d0:	70 95       	com	r23
 6d2:	61 95       	neg	r22
 6d4:	7f 4f       	sbci	r23, 0xFF	; 255
 6d6:	8f 4f       	sbci	r24, 0xFF	; 255
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	f0 68       	ori	r31, 0x80	; 128
 6dc:	3f 2e       	mov	r3, r31
 6de:	2a e0       	ldi	r18, 0x0A	; 10
 6e0:	30 e0       	ldi	r19, 0x00	; 0
 6e2:	a3 01       	movw	r20, r6
 6e4:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__ultoa_invert>
 6e8:	88 2e       	mov	r8, r24
 6ea:	86 18       	sub	r8, r6
 6ec:	45 c0       	rjmp	.+138    	; 0x778 <vfprintf+0x2ac>
 6ee:	85 37       	cpi	r24, 0x75	; 117
 6f0:	31 f4       	brne	.+12     	; 0x6fe <vfprintf+0x232>
 6f2:	23 2d       	mov	r18, r3
 6f4:	2f 7e       	andi	r18, 0xEF	; 239
 6f6:	b2 2e       	mov	r11, r18
 6f8:	2a e0       	ldi	r18, 0x0A	; 10
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	25 c0       	rjmp	.+74     	; 0x748 <vfprintf+0x27c>
 6fe:	93 2d       	mov	r25, r3
 700:	99 7f       	andi	r25, 0xF9	; 249
 702:	b9 2e       	mov	r11, r25
 704:	8f 36       	cpi	r24, 0x6F	; 111
 706:	c1 f0       	breq	.+48     	; 0x738 <vfprintf+0x26c>
 708:	18 f4       	brcc	.+6      	; 0x710 <vfprintf+0x244>
 70a:	88 35       	cpi	r24, 0x58	; 88
 70c:	79 f0       	breq	.+30     	; 0x72c <vfprintf+0x260>
 70e:	b5 c0       	rjmp	.+362    	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 710:	80 37       	cpi	r24, 0x70	; 112
 712:	19 f0       	breq	.+6      	; 0x71a <vfprintf+0x24e>
 714:	88 37       	cpi	r24, 0x78	; 120
 716:	21 f0       	breq	.+8      	; 0x720 <vfprintf+0x254>
 718:	b0 c0       	rjmp	.+352    	; 0x87a <__DATA_REGION_LENGTH__+0x7a>
 71a:	e9 2f       	mov	r30, r25
 71c:	e0 61       	ori	r30, 0x10	; 16
 71e:	be 2e       	mov	r11, r30
 720:	b4 fe       	sbrs	r11, 4
 722:	0d c0       	rjmp	.+26     	; 0x73e <vfprintf+0x272>
 724:	fb 2d       	mov	r31, r11
 726:	f4 60       	ori	r31, 0x04	; 4
 728:	bf 2e       	mov	r11, r31
 72a:	09 c0       	rjmp	.+18     	; 0x73e <vfprintf+0x272>
 72c:	34 fe       	sbrs	r3, 4
 72e:	0a c0       	rjmp	.+20     	; 0x744 <vfprintf+0x278>
 730:	29 2f       	mov	r18, r25
 732:	26 60       	ori	r18, 0x06	; 6
 734:	b2 2e       	mov	r11, r18
 736:	06 c0       	rjmp	.+12     	; 0x744 <vfprintf+0x278>
 738:	28 e0       	ldi	r18, 0x08	; 8
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	05 c0       	rjmp	.+10     	; 0x748 <vfprintf+0x27c>
 73e:	20 e1       	ldi	r18, 0x10	; 16
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <vfprintf+0x27c>
 744:	20 e1       	ldi	r18, 0x10	; 16
 746:	32 e0       	ldi	r19, 0x02	; 2
 748:	f8 01       	movw	r30, r16
 74a:	b7 fe       	sbrs	r11, 7
 74c:	07 c0       	rjmp	.+14     	; 0x75c <vfprintf+0x290>
 74e:	60 81       	ld	r22, Z
 750:	71 81       	ldd	r23, Z+1	; 0x01
 752:	82 81       	ldd	r24, Z+2	; 0x02
 754:	93 81       	ldd	r25, Z+3	; 0x03
 756:	0c 5f       	subi	r16, 0xFC	; 252
 758:	1f 4f       	sbci	r17, 0xFF	; 255
 75a:	06 c0       	rjmp	.+12     	; 0x768 <vfprintf+0x29c>
 75c:	60 81       	ld	r22, Z
 75e:	71 81       	ldd	r23, Z+1	; 0x01
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 5f       	subi	r16, 0xFE	; 254
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	a3 01       	movw	r20, r6
 76a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__ultoa_invert>
 76e:	88 2e       	mov	r8, r24
 770:	86 18       	sub	r8, r6
 772:	fb 2d       	mov	r31, r11
 774:	ff 77       	andi	r31, 0x7F	; 127
 776:	3f 2e       	mov	r3, r31
 778:	36 fe       	sbrs	r3, 6
 77a:	0d c0       	rjmp	.+26     	; 0x796 <vfprintf+0x2ca>
 77c:	23 2d       	mov	r18, r3
 77e:	2e 7f       	andi	r18, 0xFE	; 254
 780:	a2 2e       	mov	r10, r18
 782:	89 14       	cp	r8, r9
 784:	58 f4       	brcc	.+22     	; 0x79c <vfprintf+0x2d0>
 786:	34 fe       	sbrs	r3, 4
 788:	0b c0       	rjmp	.+22     	; 0x7a0 <vfprintf+0x2d4>
 78a:	32 fc       	sbrc	r3, 2
 78c:	09 c0       	rjmp	.+18     	; 0x7a0 <vfprintf+0x2d4>
 78e:	83 2d       	mov	r24, r3
 790:	8e 7e       	andi	r24, 0xEE	; 238
 792:	a8 2e       	mov	r10, r24
 794:	05 c0       	rjmp	.+10     	; 0x7a0 <vfprintf+0x2d4>
 796:	b8 2c       	mov	r11, r8
 798:	a3 2c       	mov	r10, r3
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <vfprintf+0x2d6>
 79c:	b8 2c       	mov	r11, r8
 79e:	01 c0       	rjmp	.+2      	; 0x7a2 <vfprintf+0x2d6>
 7a0:	b9 2c       	mov	r11, r9
 7a2:	a4 fe       	sbrs	r10, 4
 7a4:	0f c0       	rjmp	.+30     	; 0x7c4 <vfprintf+0x2f8>
 7a6:	fe 01       	movw	r30, r28
 7a8:	e8 0d       	add	r30, r8
 7aa:	f1 1d       	adc	r31, r1
 7ac:	80 81       	ld	r24, Z
 7ae:	80 33       	cpi	r24, 0x30	; 48
 7b0:	21 f4       	brne	.+8      	; 0x7ba <vfprintf+0x2ee>
 7b2:	9a 2d       	mov	r25, r10
 7b4:	99 7e       	andi	r25, 0xE9	; 233
 7b6:	a9 2e       	mov	r10, r25
 7b8:	09 c0       	rjmp	.+18     	; 0x7cc <vfprintf+0x300>
 7ba:	a2 fe       	sbrs	r10, 2
 7bc:	06 c0       	rjmp	.+12     	; 0x7ca <vfprintf+0x2fe>
 7be:	b3 94       	inc	r11
 7c0:	b3 94       	inc	r11
 7c2:	04 c0       	rjmp	.+8      	; 0x7cc <vfprintf+0x300>
 7c4:	8a 2d       	mov	r24, r10
 7c6:	86 78       	andi	r24, 0x86	; 134
 7c8:	09 f0       	breq	.+2      	; 0x7cc <vfprintf+0x300>
 7ca:	b3 94       	inc	r11
 7cc:	a3 fc       	sbrc	r10, 3
 7ce:	11 c0       	rjmp	.+34     	; 0x7f2 <vfprintf+0x326>
 7d0:	a0 fe       	sbrs	r10, 0
 7d2:	06 c0       	rjmp	.+12     	; 0x7e0 <vfprintf+0x314>
 7d4:	b2 14       	cp	r11, r2
 7d6:	88 f4       	brcc	.+34     	; 0x7fa <vfprintf+0x32e>
 7d8:	28 0c       	add	r2, r8
 7da:	92 2c       	mov	r9, r2
 7dc:	9b 18       	sub	r9, r11
 7de:	0e c0       	rjmp	.+28     	; 0x7fc <vfprintf+0x330>
 7e0:	b2 14       	cp	r11, r2
 7e2:	60 f4       	brcc	.+24     	; 0x7fc <vfprintf+0x330>
 7e4:	b6 01       	movw	r22, r12
 7e6:	80 e2       	ldi	r24, 0x20	; 32
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	0e 94 14 02 	call	0x428	; 0x428 <fputc>
 7ee:	b3 94       	inc	r11
 7f0:	f7 cf       	rjmp	.-18     	; 0x7e0 <vfprintf+0x314>
 7f2:	b2 14       	cp	r11, r2
 7f4:	18 f4       	brcc	.+6      	; 0x7fc <vfprintf+0x330>
 7f6:	2b 18       	sub	r2, r11
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <vfprintf+0x332>
 7fa:	98 2c       	mov	r9, r8
 7fc:	21 2c       	mov	r2, r1
 7fe:	a4 fe       	sbrs	r10, 4
 800:	10 c0       	rjmp	.+32     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 802:	b6 01       	movw	r22, r12
 804:	80 e3       	ldi	r24, 0x30	; 48
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 14 02 	call	0x428	; 0x428 <fputc>
 80c:	a2 fe       	sbrs	r10, 2
 80e:	17 c0       	rjmp	.+46     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 810:	a1 fc       	sbrc	r10, 1
 812:	03 c0       	rjmp	.+6      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 814:	88 e7       	ldi	r24, 0x78	; 120
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	02 c0       	rjmp	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81a:	88 e5       	ldi	r24, 0x58	; 88
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	b6 01       	movw	r22, r12
 820:	0c c0       	rjmp	.+24     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 822:	8a 2d       	mov	r24, r10
 824:	86 78       	andi	r24, 0x86	; 134
 826:	59 f0       	breq	.+22     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 828:	a1 fe       	sbrs	r10, 1
 82a:	02 c0       	rjmp	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82c:	8b e2       	ldi	r24, 0x2B	; 43
 82e:	01 c0       	rjmp	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 830:	80 e2       	ldi	r24, 0x20	; 32
 832:	a7 fc       	sbrc	r10, 7
 834:	8d e2       	ldi	r24, 0x2D	; 45
 836:	b6 01       	movw	r22, r12
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 14 02 	call	0x428	; 0x428 <fputc>
 83e:	89 14       	cp	r8, r9
 840:	38 f4       	brcc	.+14     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 842:	b6 01       	movw	r22, r12
 844:	80 e3       	ldi	r24, 0x30	; 48
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 14 02 	call	0x428	; 0x428 <fputc>
 84c:	9a 94       	dec	r9
 84e:	f7 cf       	rjmp	.-18     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 850:	8a 94       	dec	r8
 852:	f3 01       	movw	r30, r6
 854:	e8 0d       	add	r30, r8
 856:	f1 1d       	adc	r31, r1
 858:	80 81       	ld	r24, Z
 85a:	b6 01       	movw	r22, r12
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 14 02 	call	0x428	; 0x428 <fputc>
 862:	81 10       	cpse	r8, r1
 864:	f5 cf       	rjmp	.-22     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 866:	22 20       	and	r2, r2
 868:	09 f4       	brne	.+2      	; 0x86c <__DATA_REGION_LENGTH__+0x6c>
 86a:	42 ce       	rjmp	.-892    	; 0x4f0 <vfprintf+0x24>
 86c:	b6 01       	movw	r22, r12
 86e:	80 e2       	ldi	r24, 0x20	; 32
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	0e 94 14 02 	call	0x428	; 0x428 <fputc>
 876:	2a 94       	dec	r2
 878:	f6 cf       	rjmp	.-20     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 87a:	f6 01       	movw	r30, r12
 87c:	86 81       	ldd	r24, Z+6	; 0x06
 87e:	97 81       	ldd	r25, Z+7	; 0x07
 880:	02 c0       	rjmp	.+4      	; 0x886 <__DATA_REGION_LENGTH__+0x86>
 882:	8f ef       	ldi	r24, 0xFF	; 255
 884:	9f ef       	ldi	r25, 0xFF	; 255
 886:	2b 96       	adiw	r28, 0x0b	; 11
 888:	e2 e1       	ldi	r30, 0x12	; 18
 88a:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__epilogue_restores__>

0000088e <strnlen_P>:
 88e:	fc 01       	movw	r30, r24
 890:	05 90       	lpm	r0, Z+
 892:	61 50       	subi	r22, 0x01	; 1
 894:	70 40       	sbci	r23, 0x00	; 0
 896:	01 10       	cpse	r0, r1
 898:	d8 f7       	brcc	.-10     	; 0x890 <strnlen_P+0x2>
 89a:	80 95       	com	r24
 89c:	90 95       	com	r25
 89e:	8e 0f       	add	r24, r30
 8a0:	9f 1f       	adc	r25, r31
 8a2:	08 95       	ret

000008a4 <strnlen>:
 8a4:	fc 01       	movw	r30, r24
 8a6:	61 50       	subi	r22, 0x01	; 1
 8a8:	70 40       	sbci	r23, 0x00	; 0
 8aa:	01 90       	ld	r0, Z+
 8ac:	01 10       	cpse	r0, r1
 8ae:	d8 f7       	brcc	.-10     	; 0x8a6 <strnlen+0x2>
 8b0:	80 95       	com	r24
 8b2:	90 95       	com	r25
 8b4:	8e 0f       	add	r24, r30
 8b6:	9f 1f       	adc	r25, r31
 8b8:	08 95       	ret

000008ba <__ultoa_invert>:
 8ba:	fa 01       	movw	r30, r20
 8bc:	aa 27       	eor	r26, r26
 8be:	28 30       	cpi	r18, 0x08	; 8
 8c0:	51 f1       	breq	.+84     	; 0x916 <__stack+0x17>
 8c2:	20 31       	cpi	r18, 0x10	; 16
 8c4:	81 f1       	breq	.+96     	; 0x926 <__stack+0x27>
 8c6:	e8 94       	clt
 8c8:	6f 93       	push	r22
 8ca:	6e 7f       	andi	r22, 0xFE	; 254
 8cc:	6e 5f       	subi	r22, 0xFE	; 254
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	8f 4f       	sbci	r24, 0xFF	; 255
 8d2:	9f 4f       	sbci	r25, 0xFF	; 255
 8d4:	af 4f       	sbci	r26, 0xFF	; 255
 8d6:	b1 e0       	ldi	r27, 0x01	; 1
 8d8:	3e d0       	rcall	.+124    	; 0x956 <__stack+0x57>
 8da:	b4 e0       	ldi	r27, 0x04	; 4
 8dc:	3c d0       	rcall	.+120    	; 0x956 <__stack+0x57>
 8de:	67 0f       	add	r22, r23
 8e0:	78 1f       	adc	r23, r24
 8e2:	89 1f       	adc	r24, r25
 8e4:	9a 1f       	adc	r25, r26
 8e6:	a1 1d       	adc	r26, r1
 8e8:	68 0f       	add	r22, r24
 8ea:	79 1f       	adc	r23, r25
 8ec:	8a 1f       	adc	r24, r26
 8ee:	91 1d       	adc	r25, r1
 8f0:	a1 1d       	adc	r26, r1
 8f2:	6a 0f       	add	r22, r26
 8f4:	71 1d       	adc	r23, r1
 8f6:	81 1d       	adc	r24, r1
 8f8:	91 1d       	adc	r25, r1
 8fa:	a1 1d       	adc	r26, r1
 8fc:	20 d0       	rcall	.+64     	; 0x93e <__stack+0x3f>
 8fe:	09 f4       	brne	.+2      	; 0x902 <__stack+0x3>
 900:	68 94       	set
 902:	3f 91       	pop	r19
 904:	2a e0       	ldi	r18, 0x0A	; 10
 906:	26 9f       	mul	r18, r22
 908:	11 24       	eor	r1, r1
 90a:	30 19       	sub	r19, r0
 90c:	30 5d       	subi	r19, 0xD0	; 208
 90e:	31 93       	st	Z+, r19
 910:	de f6       	brtc	.-74     	; 0x8c8 <__ultoa_invert+0xe>
 912:	cf 01       	movw	r24, r30
 914:	08 95       	ret
 916:	46 2f       	mov	r20, r22
 918:	47 70       	andi	r20, 0x07	; 7
 91a:	40 5d       	subi	r20, 0xD0	; 208
 91c:	41 93       	st	Z+, r20
 91e:	b3 e0       	ldi	r27, 0x03	; 3
 920:	0f d0       	rcall	.+30     	; 0x940 <__stack+0x41>
 922:	c9 f7       	brne	.-14     	; 0x916 <__stack+0x17>
 924:	f6 cf       	rjmp	.-20     	; 0x912 <__stack+0x13>
 926:	46 2f       	mov	r20, r22
 928:	4f 70       	andi	r20, 0x0F	; 15
 92a:	40 5d       	subi	r20, 0xD0	; 208
 92c:	4a 33       	cpi	r20, 0x3A	; 58
 92e:	18 f0       	brcs	.+6      	; 0x936 <__stack+0x37>
 930:	49 5d       	subi	r20, 0xD9	; 217
 932:	31 fd       	sbrc	r19, 1
 934:	40 52       	subi	r20, 0x20	; 32
 936:	41 93       	st	Z+, r20
 938:	02 d0       	rcall	.+4      	; 0x93e <__stack+0x3f>
 93a:	a9 f7       	brne	.-22     	; 0x926 <__stack+0x27>
 93c:	ea cf       	rjmp	.-44     	; 0x912 <__stack+0x13>
 93e:	b4 e0       	ldi	r27, 0x04	; 4
 940:	a6 95       	lsr	r26
 942:	97 95       	ror	r25
 944:	87 95       	ror	r24
 946:	77 95       	ror	r23
 948:	67 95       	ror	r22
 94a:	ba 95       	dec	r27
 94c:	c9 f7       	brne	.-14     	; 0x940 <__stack+0x41>
 94e:	00 97       	sbiw	r24, 0x00	; 0
 950:	61 05       	cpc	r22, r1
 952:	71 05       	cpc	r23, r1
 954:	08 95       	ret
 956:	9b 01       	movw	r18, r22
 958:	ac 01       	movw	r20, r24
 95a:	0a 2e       	mov	r0, r26
 95c:	06 94       	lsr	r0
 95e:	57 95       	ror	r21
 960:	47 95       	ror	r20
 962:	37 95       	ror	r19
 964:	27 95       	ror	r18
 966:	ba 95       	dec	r27
 968:	c9 f7       	brne	.-14     	; 0x95c <__stack+0x5d>
 96a:	62 0f       	add	r22, r18
 96c:	73 1f       	adc	r23, r19
 96e:	84 1f       	adc	r24, r20
 970:	95 1f       	adc	r25, r21
 972:	a0 1d       	adc	r26, r0
 974:	08 95       	ret

00000976 <__prologue_saves__>:
 976:	2f 92       	push	r2
 978:	3f 92       	push	r3
 97a:	4f 92       	push	r4
 97c:	5f 92       	push	r5
 97e:	6f 92       	push	r6
 980:	7f 92       	push	r7
 982:	8f 92       	push	r8
 984:	9f 92       	push	r9
 986:	af 92       	push	r10
 988:	bf 92       	push	r11
 98a:	cf 92       	push	r12
 98c:	df 92       	push	r13
 98e:	ef 92       	push	r14
 990:	ff 92       	push	r15
 992:	0f 93       	push	r16
 994:	1f 93       	push	r17
 996:	cf 93       	push	r28
 998:	df 93       	push	r29
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62
 99e:	ca 1b       	sub	r28, r26
 9a0:	db 0b       	sbc	r29, r27
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	f8 94       	cli
 9a6:	de bf       	out	0x3e, r29	; 62
 9a8:	0f be       	out	0x3f, r0	; 63
 9aa:	cd bf       	out	0x3d, r28	; 61
 9ac:	09 94       	ijmp

000009ae <__epilogue_restores__>:
 9ae:	2a 88       	ldd	r2, Y+18	; 0x12
 9b0:	39 88       	ldd	r3, Y+17	; 0x11
 9b2:	48 88       	ldd	r4, Y+16	; 0x10
 9b4:	5f 84       	ldd	r5, Y+15	; 0x0f
 9b6:	6e 84       	ldd	r6, Y+14	; 0x0e
 9b8:	7d 84       	ldd	r7, Y+13	; 0x0d
 9ba:	8c 84       	ldd	r8, Y+12	; 0x0c
 9bc:	9b 84       	ldd	r9, Y+11	; 0x0b
 9be:	aa 84       	ldd	r10, Y+10	; 0x0a
 9c0:	b9 84       	ldd	r11, Y+9	; 0x09
 9c2:	c8 84       	ldd	r12, Y+8	; 0x08
 9c4:	df 80       	ldd	r13, Y+7	; 0x07
 9c6:	ee 80       	ldd	r14, Y+6	; 0x06
 9c8:	fd 80       	ldd	r15, Y+5	; 0x05
 9ca:	0c 81       	ldd	r16, Y+4	; 0x04
 9cc:	1b 81       	ldd	r17, Y+3	; 0x03
 9ce:	aa 81       	ldd	r26, Y+2	; 0x02
 9d0:	b9 81       	ldd	r27, Y+1	; 0x01
 9d2:	ce 0f       	add	r28, r30
 9d4:	d1 1d       	adc	r29, r1
 9d6:	0f b6       	in	r0, 0x3f	; 63
 9d8:	f8 94       	cli
 9da:	de bf       	out	0x3e, r29	; 62
 9dc:	0f be       	out	0x3f, r0	; 63
 9de:	cd bf       	out	0x3d, r28	; 61
 9e0:	ed 01       	movw	r28, r26
 9e2:	08 95       	ret

000009e4 <_exit>:
 9e4:	f8 94       	cli

000009e6 <__stop_program>:
 9e6:	ff cf       	rjmp	.-2      	; 0x9e6 <__stop_program>
